#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏ 3-–∫–ª–∞—Å—Å–æ–≤–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏
"""

import os
import random
import cv2
import numpy as np
from pathlib import Path
from ultralytics import YOLO
import matplotlib.pyplot as plt

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
MODEL_PATH = "yolo_training_3class_optimized/3class_detection_optimized/weights/best.pt"
TEST_IMAGES_DIR = "yolo_data_3class/test/images"
OUTPUT_DIR = "test_3class_best_model"
NUM_TEST_IMAGES = 20

# –ö–ª–∞—Å—Å—ã
CLASS_NAMES = {
    0: "dirt",
    1: "scratch", 
    2: "dent"
}

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
CLASS_COLORS = {
    0: (255, 0, 0),      # dirt - –∫—Ä–∞—Å–Ω—ã–π
    1: (0, 255, 0),      # scratch - –∑–µ–ª–µ–Ω—ã–π
    2: (0, 0, 255)       # dent - —Å–∏–Ω–∏–π
}

def test_model():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö"""
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–£–ß–®–ï–ô 3-–ö–õ–ê–°–°–û–í–û–ô –ú–û–î–ï–õ–ò")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å
    if not os.path.exists(MODEL_PATH):
        print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {MODEL_PATH}")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å: {MODEL_PATH}")
    model = YOLO(MODEL_PATH)
    print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    test_images = list(Path(TEST_IMAGES_DIR).glob("*.jpg"))
    if not test_images:
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {TEST_IMAGES_DIR}")
        return
    
    print(f"üì∏ –ù–∞–π–¥–µ–Ω–æ {len(test_images)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    selected_images = random.sample(test_images, min(NUM_TEST_IMAGES, len(test_images)))
    print(f"üé≤ –í—ã–±—Ä–∞–Ω–æ {len(selected_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_detections = 0
    class_detections = {0: 0, 1: 0, 2: 0}
    confidence_scores = []
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    for i, image_path in enumerate(selected_images):
        print(f"\nüì∏ [{i+1}/{len(selected_images)}] –¢–µ—Å—Ç–∏—Ä—É–µ–º: {image_path.name}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        results = model(str(image_path), conf=0.25, iou=0.5)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = cv2.imread(str(image_path))
        if image is None:
            print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            continue
        
        image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        height, width = image_rgb.shape[:2]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        detections = 0
        if results[0].boxes is not None and len(results[0].boxes) > 0:
            boxes = results[0].boxes.xyxy.cpu().numpy()
            confidences = results[0].boxes.conf.cpu().numpy()
            classes = results[0].boxes.cls.cpu().numpy().astype(int)
            
            detections = len(boxes)
            total_detections += detections
            
            print(f"  üéØ –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {detections}")
            
            # –†–∏—Å—É–µ–º bounding boxes
            for box, conf, cls in zip(boxes, confidences, classes):
                x1, y1, x2, y2 = box.astype(int)
                class_name = CLASS_NAMES.get(cls, f"unknown_{cls}")
                color = CLASS_COLORS.get(cls, (255, 255, 255))
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                class_detections[cls] += 1
                confidence_scores.append(conf)
                
                print(f"    - {class_name}: {conf:.3f} [{x1},{y1},{x2},{y2}]")
                
                # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
                cv2.rectangle(image_rgb, (x1, y1), (x2, y2), color, 3)
                
                # –ü–æ–¥–ø–∏—Å—å
                label = f"{class_name}: {conf:.2f}"
                font_scale = max(0.5, min(1.0, width / 1000))
                thickness = max(1, int(width / 500))
                
                # –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
                (text_width, text_height), baseline = cv2.getTextSize(
                    label, cv2.FONT_HERSHEY_SIMPLEX, font_scale, thickness
                )
                
                # –§–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                cv2.rectangle(image_rgb, 
                             (x1, y1 - text_height - 10), 
                             (x1 + text_width, y1), 
                             color, -1)
                
                # –¢–µ–∫—Å—Ç
                cv2.putText(image_rgb, label, (x1, y1 - 5), 
                           cv2.FONT_HERSHEY_SIMPLEX, font_scale, (255, 255, 255), thickness)
        else:
            print(f"  ‚ùå –û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        output_path = os.path.join(OUTPUT_DIR, f"test_{i+1:02d}_{image_path.stem}.jpg")
        cv2.imwrite(output_path, cv2.cvtColor(image_rgb, cv2.COLOR_RGB2BGR))
        print(f"  üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"  - –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(selected_images)}")
    print(f"  - –í—Å–µ–≥–æ –¥–µ—Ç–µ–∫—Ü–∏–π: {total_detections}")
    print(f"  - –°—Ä–µ–¥–Ω–µ–µ –¥–µ—Ç–µ–∫—Ü–∏–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {total_detections / len(selected_images):.2f}")
    
    if confidence_scores:
        print(f"  - –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {np.mean(confidence_scores):.3f}")
        print(f"  - –ú–µ–¥–∏–∞–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {np.median(confidence_scores):.3f}")
        print(f"  - –ú–∏–Ω —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {np.min(confidence_scores):.3f}")
        print(f"  - –ú–∞–∫—Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {np.max(confidence_scores):.3f}")
    
    print(f"\nüìà –î–ï–¢–ï–ö–¶–ò–ò –ü–û –ö–õ–ê–°–°–ê–ú:")
    for class_id, class_name in CLASS_NAMES.items():
        count = class_detections[class_id]
        percentage = count / total_detections * 100 if total_detections > 0 else 0
        print(f"  - {class_name}: {count} ({percentage:.1f}%)")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {OUTPUT_DIR}")

def test_on_specific_images():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏"""
    print(f"\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê –ö–û–ù–ö–†–ï–¢–ù–´–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–•")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    model = YOLO(MODEL_PATH)
    
    # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏
    class_examples = {0: [], 1: [], 2: []}
    
    for split in ['train', 'val', 'test']:
        labels_dir = f"yolo_data_3class/{split}/labels"
        images_dir = f"yolo_data_3class/{split}/images"
        
        if not os.path.exists(labels_dir):
            continue
        
        for label_file in Path(labels_dir).glob("*.txt"):
            try:
                with open(label_file, 'r') as f:
                    lines = f.readlines()
                
                image_classes = set()
                for line in lines:
                    line = line.strip()
                    if not line:
                        continue
                    parts = line.split()
                    if len(parts) == 5:
                        class_id = int(parts[0])
                        if class_id in CLASS_NAMES:
                            image_classes.add(class_id)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
                for class_id in image_classes:
                    if len(class_examples[class_id]) < 3:  # –ü–æ 3 –ø—Ä–∏–º–µ—Ä–∞ –Ω–∞ –∫–ª–∞—Å—Å
                        image_name = label_file.stem + '.jpg'
                        image_path = Path(images_dir) / image_name
                        if image_path.exists():
                            class_examples[class_id].append(image_path)
                            
            except Exception as e:
                continue
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã
    for class_id, class_name in CLASS_NAMES.items():
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –∫–ª–∞—Å—Å–∞ '{class_name}':")
        
        for i, image_path in enumerate(class_examples[class_id]):
            print(f"  [{i+1}] {image_path.name}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            results = model(str(image_path), conf=0.25, iou=0.5)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if results[0].boxes is not None and len(results[0].boxes) > 0:
                boxes = results[0].boxes.xyxy.cpu().numpy()
                confidences = results[0].boxes.conf.cpu().numpy()
                classes = results[0].boxes.cls.cpu().numpy().astype(int)
                
                print(f"    –ù–∞–π–¥–µ–Ω–æ: {len(boxes)} –æ–±—ä–µ–∫—Ç–æ–≤")
                for box, conf, cls in zip(boxes, confidences, classes):
                    predicted_class = CLASS_NAMES.get(cls, f"unknown_{cls}")
                    print(f"      - {predicted_class}: {conf:.3f}")
            else:
                print(f"    ‚ùå –û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def main():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
    random.seed(42)
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_model()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö
    test_on_specific_images()

if __name__ == "__main__":
    main()
