#!/usr/bin/env python3
"""
YOLOv8s training for binary defect detection (1 class: damage).
Images without defects should have 0 boxes.
"""

import os
import random
import torch
import numpy as np
from ultralytics import YOLO

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è Windows multiprocessing
if __name__ == '__main__':
    import multiprocessing
    multiprocessing.freeze_support()

DATA_YAML = "../yolo_data_damage/data.yaml"
BASE_MODEL = "../yolov8s.pt"           # <- –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º s
RUN_DIR    = "../yolo_training_damage"
RUN_NAME   = "damage_detection"

# –ü–æ—Ä–æ–≥ –¥–ª—è "–±–∏–Ω–∞—Ä–Ω–æ–≥–æ" —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–µ
BIN_CONF = 0.25   # –º–æ–∂–Ω–æ –ø–æ–¥–∫—Ä—É—Ç–∏—Ç—å –ø–æ—Å–ª–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ PR-–∫—Ä–∏–≤–æ–π

def setup_seed(seed: int = 42):
    random.seed(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    torch.cuda.manual_seed_all(seed)
    # –¥–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º –º–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª–∏—Ç—å, –Ω–æ —É–±–∏—Ä–∞–µ—Ç ¬´–¥—Ä–æ–∂–∞–Ω–∏–µ¬ª
    torch.backends.cudnn.deterministic = True
    torch.backends.cudnn.benchmark = False

def test_environment():
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    try:
        import ultralytics
        print(f"‚úÖ Ultralytics: {ultralytics.__version__}")
    except ImportError:
        print("‚ùå Ultralytics –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return False

    try:
        import torch
        print(f"‚úÖ PyTorch: {torch.__version__}")
    except ImportError:
        print("‚ùå PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return False

    if os.path.exists(DATA_YAML):
        print("‚úÖ data.yaml –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ùå data.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python scripts/prepare_yolo_damage.py")
        return False

    if os.path.exists(BASE_MODEL):
        print("‚úÖ –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞:", BASE_MODEL)
    else:
        print("‚ö†Ô∏è –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:", BASE_MODEL)

    return True

def main():
    setup_seed(42)

    print("–û–±—É—á–µ–Ω–∏–µ YOLO –º–æ–¥–µ–ª–∏ –¥–ª—è –±–∏–Ω–∞—Ä–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π")
    print("damage - –µ—Å—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è, no_damage - –Ω–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π (0 –±–æ–∫—Å–æ–≤)")
    print("=" * 60)

    print(f"PyTorch –≤–µ—Ä—Å–∏—è: {torch.__version__}")
    print(f"CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {torch.cuda.is_available()}")
    device = 0 if torch.cuda.is_available() else 'cpu'
    print(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {'CUDA:0' if device == 0 else 'CPU'}")

    if not os.path.exists(DATA_YAML):
        print("‚ùå –§–∞–π–ª data.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python scripts/prepare_yolo_damage.py")
        return

    os.makedirs(RUN_DIR, exist_ok=True)

    print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å YOLOv8s...")
    model = YOLO(BASE_MODEL)

    # –ü—Ä–æ—Ñ–∏–ª—å ¬´—á—É—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ, –Ω–æ –ª—É—á—à–µ –Ω–∞ –º–µ–ª–∫–∏—Ö –¥–µ—Ñ–µ–∫—Ç–∞—Ö¬ª
    epochs = 60
    imgsz = 832        # 640 –±—ã—Å—Ç—Ä–æ, 832/960 –ª—É—á—à–µ –Ω–∞ —Ü–∞—Ä–∞–ø–∏–Ω–∞—Ö
    batch = 16 if device != 'cpu' else 4

    print("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è:")
    print(f"   - –≠–ø–æ—Ö–∏: {epochs}")
    print(f"   - Batch size: {batch}")
    print(f"   - Image size: {imgsz}")
    print("   - –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏: —É–º–µ—Ä–µ–Ω–Ω—ã–µ + –∑–∞–∫—Ä—ã–≤–∞–µ–º mosaic –≤ —Ñ–∏–Ω–∞–ª–µ")
    print("   - multi_scale: ON (–º–∞—Å—à—Ç–∞–± –ø–æ–º–æ–≥–∞–µ—Ç –º–µ–ª–∫–∏–º –æ–±—ä–µ–∫—Ç–∞–º)")
    print("   - close_mosaic: 10 (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —ç–ø–æ—Ö –±–µ–∑ mosaic)")
    print("   - patience: 15 (—Ä–∞–Ω–Ω—è—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞)")
    print("   - workers:", 1 if device != 'cpu' else 0)

    print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ...")
    try:
        results = model.train(
            data=DATA_YAML,
            epochs=epochs,
            batch=batch,
            imgsz=imgsz,
            device=device,
            workers=1 if device != 'cpu' else 0,  # —É–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è Windows multiprocessing
            lr0=0.001,
            patience=15,
            project=RUN_DIR,
            name=RUN_NAME,
            exist_ok=True,
            save=True,
            save_period=5,
            plots=True,
            cache=(device != 'cpu'),
            amp=(device != 'cpu'),
            # –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ (—á—É—Ç—å –º—è–≥—á–µ –ø–æ–¥ –º–µ–ª–∫–∏–µ –¥–µ—Ñ–µ–∫—Ç—ã)
            hsv_h=0.015,
            hsv_s=0.5,
            hsv_v=0.4,
            degrees=0.0,
            translate=0.08,
            scale=0.5,
            shear=0.0,
            perspective=0.0,
            flipud=0.0,
            fliplr=0.5,
            mosaic=0.6,        # –Ω–µ 1.0
            close_mosaic=10,   # –æ—Ç–∫–ª—é—á–∏–º –≤ –∫–æ–Ω—Ü–µ
            mixup=0.0,
            copy_paste=0.0,
            multi_scale=True,  # –≤–∞–∂–Ω–µ–Ω—å–∫–æ
            rect=False,        # –¥–ª—è train –æ–±—ã—á–Ω–æ False; –¥–ª—è val –º–æ–∂–Ω–æ True
        )

        print("\n‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {os.path.join(RUN_DIR, RUN_NAME)}")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ test-—Å–ø–ª–∏—Ç–µ (–µ—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤ data.yaml)
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å (split='test' –µ—Å–ª–∏ –µ—Å—Ç—å)...")
        test_results = model.val(
            data=DATA_YAML,
            split='test',       # –µ—Å–ª–∏ –Ω–µ—Ç test ‚Äî Ultralytics –≤–æ–∑—å–º—ë—Ç val
            imgsz=imgsz,
            iou=0.6,
            conf=0.001,         # –Ω–∏–∑–∫–∏–π conf –¥–ª—è PR-–∫—Ä–∏–≤–æ–π
            rect=True,          # –±—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥. —É–∫–ª–∞–¥–∫–∞
            plots=True,
            save_json=False,
            augment=False       # –±–µ–∑ TTA –¥–ª—è —á–µ—Å—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        )

        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   - mAP50:    {test_results.box.map50:.3f}")
        print(f"   - mAP50-95: {test_results.box.map:.3f}")
        print(f"   - Precision:{test_results.box.mp:.3f}")
        print(f"   - Recall:   {test_results.box.mr:.3f}")
        f1 = 2 * test_results.box.mp * test_results.box.mr / (test_results.box.mp + test_results.box.mr + 1e-9)
        print(f"   - F1:       {f1:.3f}")

        if test_results.box.map50 > 0.70:
            print("üéâ –û—Ç–ª–∏—á–Ω–æ! –ú–æ–∂–Ω–æ –≤—ã–Ω–æ—Å–∏—Ç—å –≤ –ø—Ä–æ–¥.")
        elif test_results.box.map50 > 0.50:
            print("‚úÖ –•–æ—Ä–æ—à–æ! –ï—â—ë –Ω–µ–º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö/—ç–ø–æ—Ö ‚Äî –∏ –±—É–¥–µ—Ç —Ç–æ–ø.")
        elif test_results.box.map50 > 0.30:
            print("‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ. –ü–æ–¥—É–º–∞–π—Ç–µ –æ —Ä–∞–∑–º–µ—Ç–∫–µ/–∞—É–≥–∞—Ö/—Ä–∞–∑–º–µ—Ä–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫.")
        else:
            print("‚ùå –°–ª–∞–±–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤, —Ä–∞–∑–º–µ—Ç–∫—É –∏ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏.")

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
        best_pt = os.path.join(RUN_DIR, RUN_NAME, "weights", "best.pt")
        if os.path.exists(best_pt):
            print(f"\nüíæ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {best_pt}")
            import shutil
            shutil.copy2(best_pt, "../damage_detector.pt")
            print("üìã –ö–æ–ø–∏—è: ../damage_detector.pt")

            print("üì¶ –≠–∫—Å–ø–æ—Ä—Ç –≤ ONNX (–¥–ª—è –ø—Ä–æ–¥-–∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞)...")
            export_path = model.export(format="onnx", imgsz=imgsz, dynamic=True, simplify=True)
            print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:", export_path)

        print("\nüéâ –ì–æ—Ç–æ–≤–æ! –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("   1) batch=1-2")
        print("   2) imgsz=640")
        print("   3) cache=False, amp=False")
        print("   4) –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É –∏ data.yaml")

if __name__ == "__main__":
    if test_environment():
        main()
    else:
        print("\n‚ùå –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install 'ultralytics>=8.0.0' torch torchvision")
