#!/usr/bin/env python3
"""
Optimized YOLO training for RTX 3050 Ti 4GB
"""

import os
import random
import torch
import numpy as np
from ultralytics import YOLO

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è Windows multiprocessing
if __name__ == '__main__':
    import multiprocessing
    multiprocessing.freeze_support()

# Settings
DATA_YAML = "data/yolo_data_3class/data.yaml"
BASE_MODEL = "YOLOv8s.pt"  # YOLOv8s for 4GB GPU
RUN_DIR = "models/yolo_training_3class_optimized"
RUN_NAME = "3class_detection_optimized"

def setup_seed(seed: int = 42):
    """Set seed for reproducibility"""
    random.seed(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    torch.cuda.manual_seed_all(seed)
    torch.backends.cudnn.deterministic = True
    torch.backends.cudnn.benchmark = False

def check_gpu_memory():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ GPU"""
    if torch.cuda.is_available():
        gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024**3
        print(f"üîç GPU –ø–∞–º—è—Ç—å: {gpu_memory:.1f} GB")
        
        if gpu_memory < 6:
            print("‚ö†Ô∏è –ú–∞–ª–æ GPU –ø–∞–º—è—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            return False
        else:
            print("‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ GPU –ø–∞–º—è—Ç–∏")
            return True
    return False

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º CUDA
    if torch.cuda.is_available():
        print(f"‚úÖ CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {torch.cuda.get_device_name(0)}")
        gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024**3
        print(f"   –ü–∞–º—è—Ç—å GPU: {gpu_memory:.1f} GB")
    else:
        print("‚ö†Ô∏è CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç–∞—Å–µ—Ç
    if os.path.exists(DATA_YAML):
        print(f"‚úÖ –î–∞—Ç–∞—Å–µ—Ç –Ω–∞–π–¥–µ–Ω: {DATA_YAML}")
    else:
        print(f"‚ùå –î–∞—Ç–∞—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {DATA_YAML}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å
    if os.path.exists(BASE_MODEL):
        print(f"‚úÖ –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞: {BASE_MODEL}")
    else:
        print(f"‚ùå –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {BASE_MODEL}")
        return False
    
    print("=" * 40)
    return True

def check_existing_training():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
    run_path = os.path.join(RUN_DIR, RUN_NAME)
    last_pt = os.path.join(run_path, 'weights', 'last.pt')
    
    if os.path.exists(last_pt):
        print(f"üîÑ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ—Ä–≤–∞–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ: {last_pt}")
        return last_pt
    return None

def train_model():
    """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    print("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å GPU
    has_enough_memory = check_gpu_memory()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ—Ä–≤–∞–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    existing_model = check_existing_training()
    
    if existing_model:
        print(f"üì• –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—É—á–µ–Ω–∏–µ —Å: {existing_model}")
        model = YOLO(existing_model)
        resume_training = True
    else:
        print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å: {BASE_MODEL}")
        model = YOLO(BASE_MODEL)
        resume_training = False
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è RTX 3050 Ti 4GB
    if has_enough_memory:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è GPU —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –ø–∞–º—è—Ç—å—é
        training_args = {
            'data': DATA_YAML,
            'epochs': 150,
            'imgsz': 640,
            'batch': 8,
            'lr0': 0.01,
            'lrf': 0.1,
            'momentum': 0.937,
            'weight_decay': 0.0005,
            'warmup_epochs': 3,
            'warmup_momentum': 0.8,
            'warmup_bias_lr': 0.1,
            'box': 7.5,
            'cls': 0.5,
            'dfl': 1.5,
            'label_smoothing': 0.0,
            'nbs': 64,
            'overlap_mask': True,
            'mask_ratio': 4,
            'dropout': 0.0,
            'val': True,
            'plots': True,
            'save': True,
            'save_period': 10,
            'cache': True,
            'device': '',
            'workers': 4,
            'project': RUN_DIR,
            'name': RUN_NAME,
            'exist_ok': True,
            'pretrained': True,
            'optimizer': 'auto',
            'verbose': True,
            'seed': 42,
            'deterministic': True,
            'single_cls': False,
            'rect': False,
            'cos_lr': False,
            'close_mosaic': 10,
            'resume': resume_training,
            'amp': True,
            'fraction': 1.0,
            'profile': False,
            'freeze': None,
            'multi_scale': False,
            'overlap_mask': True,
            'mask_ratio': 4,
            'dropout': 0.0,
            'val': True,
            'split': 'val',
            'save_json': False,
            'save_hybrid': False,
            'conf': None,
            'iou': 0.7,
            'max_det': 300,
            'half': False,
            'dnn': False,
            'vid_stride': 1
        }
    else:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è GPU —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç—å—é
        training_args = {
            'data': DATA_YAML,
            'epochs': 100,
            'imgsz': 640,
            'batch': 2,  # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π batch
            'lr0': 0.01,
            'lrf': 0.1,
            'momentum': 0.937,
            'weight_decay': 0.0005,
            'warmup_epochs': 3,
            'warmup_momentum': 0.8,
            'warmup_bias_lr': 0.1,
            'box': 7.5,
            'cls': 0.5,
            'dfl': 1.5,
            'label_smoothing': 0.0,
            'nbs': 64,
            'overlap_mask': True,
            'mask_ratio': 4,
            'dropout': 0.0,
            'val': True,
            'plots': True,
            'save': True,
            'save_period': 10,
            'cache': False,  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
            'device': '',
            'workers': 2,  # –ú–µ–Ω—å—à–µ –≤–æ—Ä–∫–µ—Ä–æ–≤
            'project': RUN_DIR,
            'name': RUN_NAME,
            'exist_ok': True,
            'pretrained': True,
            'optimizer': 'auto',
            'verbose': True,
            'seed': 42,
            'deterministic': True,
            'single_cls': False,
            'rect': False,
            'cos_lr': False,
            'close_mosaic': 10,
            'resume': resume_training,
            'amp': True,
            'fraction': 1.0,
            'profile': False,
            'freeze': None,
            'multi_scale': False,
            'overlap_mask': True,
            'mask_ratio': 4,
            'dropout': 0.0,
            'val': True,
            'split': 'val',
            'save_json': False,
            'save_hybrid': False,
            'conf': None,
            'iou': 0.7,
            'max_det': 300,
            'half': False,
            'dnn': False,
            'vid_stride': 1
        }
    
    print("üìã –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:")
    print(f"   –ú–æ–¥–µ–ª—å: {BASE_MODEL}")
    print(f"   –≠–ø–æ—Ö–∏: {training_args['epochs']}")
    print(f"   –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {training_args['imgsz']}")
    print(f"   Batch size: {training_args['batch']}")
    print(f"   Learning rate: {training_args['lr0']}")
    print(f"   –ö–µ—à: {training_args['cache']}")
    print(f"   –í–æ—Ä–∫–µ—Ä—ã: {training_args['workers']}")
    
    # –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
    print("\nüéØ –ó–ê–ü–£–°–ö–ê–ï–ú –û–ë–£–ß–ï–ù–ò–ï...")
    results = model.train(**training_args)
    
    print("‚úÖ –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    return results

def estimate_training_time():
    """–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—É—á–µ–Ω–∏—è"""
    print("\n‚è±Ô∏è –û–¶–ï–ù–ö–ê –í–†–ï–ú–ï–ù–ò –û–ë–£–ß–ï–ù–ò–Ø:")
    print("=" * 40)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    images = 1500
    epochs = 100
    batch_size = 2  # –î–ª—è 4GB GPU
    imgsz = 640
    
    # –†–∞—Å—á–µ—Ç—ã
    images_per_epoch = images * 0.8  # train split
    batches_per_epoch = images_per_epoch / batch_size
    
    # –í—Ä–µ–º—è –Ω–∞ –±–∞—Ç—á –¥–ª—è RTX 3050 Ti 4GB
    time_per_batch = 1.5  # —Å–µ–∫—É–Ω–¥—ã
    time_per_epoch = batches_per_epoch * time_per_batch / 60  # –º–∏–Ω—É—Ç—ã
    total_time_hours = (time_per_epoch * epochs) / 60
    
    print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images}")
    print(f"–≠–ø–æ—Ö: {epochs}")
    print(f"Batch size: {batch_size}")
    print(f"–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {imgsz}x{imgsz}")
    print(f"–ë–∞—Ç—á–µ–π –Ω–∞ —ç–ø–æ—Ö—É: {batches_per_epoch:.0f}")
    print(f"–í—Ä–µ–º—è –Ω–∞ –±–∞—Ç—á: ~{time_per_batch} —Å–µ–∫")
    print(f"–í—Ä–µ–º—è –Ω–∞ —ç–ø–æ—Ö—É: ~{time_per_epoch:.1f} –º–∏–Ω")
    print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è: ~{total_time_hours:.1f} —á–∞—Å–æ–≤")
    
    return total_time_hours

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï YOLO")
    print("=" * 50)
    print("–ú–æ–¥–µ–ª—å: YOLOv11s (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)")
    print("–ö–ª–∞—Å—Å—ã: dirt, scratch, dent")
    print("GPU: RTX 3050 Ti 4GB")
    print("=" * 50)
    
    # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    estimate_training_time()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º seed
    setup_seed(42)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not check_environment():
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º, –æ–±—É—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    try:
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        results = train_model()
        
        print("\nüéâ –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {os.path.abspath(RUN_DIR)}")
        print(f"üèÜ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {os.path.join(RUN_DIR, RUN_NAME, 'weights', 'best.pt')}")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –û–ë–£–ß–ï–ù–ò–ï –û–°–¢–ê–ù–û–í–õ–ï–ù–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú")
        print("üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –º–æ–∂–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∂–µ")
        print(f"üîÑ –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
